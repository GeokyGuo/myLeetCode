第三课：

206、24、25 这三个题可以归到一类 都是对链表的反转

递归法：206、24  在递归是把返回值都当成 反转后新链表的头， 其实也很好理解，整个方法最后返回的必然是反转后新链表的头

指针交换法： 24、25   这两个题也很简单，主要是掌握三个指针：
    1. 前一组的最后一个节点，因为反转后的小短链表要挂在上边
    2. K个一组中的 第一个和最后一个节点， 然后反转的时候，
        k这组的最后一个，先挂到前驱
        反转这k组
        把k组的最后一个连到下一个K组的第一个

 24题相当于是25题当K= 2 时的特例

 142 找出有环的第一个，核心思想是  f = 2s  f = s+ nb     有环的第一个处于  a+nb
 189的环状替代是一个新思路，单次环状替代可能不够完全，要有 cout<num.length


 第四课：
 主要就是单调栈的应用，有个重要的语法
 while(!stack.isEmpty&&height[i]>height[stack.top]){
 //不进栈的话要做相应操作做出相应的操作
 }
stack.push(height[i])
